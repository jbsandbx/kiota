/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.microsoft.kiota.authentication;

import org.junit.jupiter.api.Test;

import reactor.core.publisher.Mono;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.net.URI;
import java.net.URISyntaxException;
import java.util.HashMap;

import com.azure.core.credential.AccessToken;
import com.azure.core.credential.TokenCredential;
import com.azure.core.credential.TokenRequestContext;
import com.microsoft.kiota.HttpMethod;
import com.microsoft.kiota.RequestInformation;

class AzureIdentityAccessTokenProviderTest {
    @Test
    void testAddsClaimsToTheTokenContext() throws URISyntaxException {
        final var credentialMock = mock(TokenCredential.class);
        when(credentialMock.getToken(any(TokenRequestContext.class))).thenAnswer(r -> {
            final var context = (TokenRequestContext) r.getArgument(0);
            assertEquals(context.getClaims(), "{\"access_token\":{\"nbf\":{\"essential\":true, \"value\":\"1652813508\"}}}");
            return Mono.just(mock(AccessToken.class));
        });
        final var authenticationProvider = new AzureIdentityAuthenticationProvider(credentialMock, null, "User.Read");
        final var testRequest = new RequestInformation() {{
            this.httpMethod = HttpMethod.GET;
            this.setUri(new URI("https://graph.microsoft.com/v1.0/me"));
        }};
        final var additionalContext = new HashMap<String, Object>() {{
           this.put("claims", "eyJhY2Nlc3NfdG9rZW4iOnsibmJmIjp7ImVzc2VudGlhbCI6dHJ1ZSwgInZhbHVlIjoiMTY1MjgxMzUwOCJ9fX0=");
        }};
        authenticationProvider.authenticateRequest(testRequest, additionalContext);

        verify(credentialMock, times(1)).getToken(any(TokenRequestContext.class));
    }
}
